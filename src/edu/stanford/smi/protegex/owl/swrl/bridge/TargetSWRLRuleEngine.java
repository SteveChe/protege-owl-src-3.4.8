/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License");  you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 *
 * The Original Code is Protege-2000.
 *
 * The Initial Developer of the Original Code is Stanford University. Portions
 * created by Stanford University are Copyright (C) 2007.  All Rights Reserved.
 *
 * Protege was developed by Stanford Medical Informatics
 * (http://www.smi.stanford.edu) at the Stanford University School of Medicine
 * with support from the National Library of Medicine, the National Science
 * Foundation, and the Defense Advanced Research Projects Agency.  Current
 * information about Protege can be obtained at http://protege.stanford.edu.
 *
 */


package edu.stanford.smi.protegex.owl.swrl.bridge;

import edu.stanford.smi.protegex.owl.swrl.bridge.exceptions.TargetSWRLRuleEngineException;
import edu.stanford.smi.protegex.owl.swrl.portability.OWLAxiomReference;

import java.util.List;

/**
 * This interface defines the methods that must be provided by an implementation of a SWRL rule engine.<p>
 *
 * A rule engine can communicate with the bridge using the SWRLRuleEngineBridge interface. The engine can use the bridge 
 * to, for example, infer axioms or to invoke built-ins.<p>
 *
 * Detailed documentation for this mechanism can be found <a href="http://protege.cim3.net/cgi-bin/wiki.pl?SWRLRuleEngineBridgeFAQ">here</a>.
 */
public interface TargetSWRLRuleEngine
{
	/*
	 * Return the name of the target rule engine.
	 */
	String getName(); 

	/*
	 * Return version information of the target rule engine.
	 */
	String getVersion(); 

  /**
   * Initialize the target engine. Supply it with the bridge.
   */
  void initialize(SWRLRuleEngineBridge bridge) throws TargetSWRLRuleEngineException;

  /**
   * Reset the rule engine.
   */
  void resetRuleEngine() throws TargetSWRLRuleEngineException;
  
  /**
   * Run the rule engine.
   */
  void runRuleEngine() throws TargetSWRLRuleEngineException;

  /**
   * Define a target rule engine representation of an OWL axiom. SWRL rules are a type of OWL axiom.
   */
  void defineOWLAxiom(OWLAxiomReference axiom) throws TargetSWRLRuleEngineException;
  
  /**
   * Define a rule engine representation of one set of the arguments generated by a built-in that binds one or more of its arguments. <p>
   *
   * For example, if tbox:isSubClassOf(?x, Person) is called with unbound argument ?x and Person has subclasses Male and Female then
   * two arguments bindings (Male, Person) and (Female, Person) will be generated by the built-in bridge and passed to this method.  
   */
  void defineBuiltInArgumentBinding(String ruleName, String builtInName, int builtInIndex, List<BuiltInArgument> arguments) throws TargetSWRLRuleEngineException;
}
